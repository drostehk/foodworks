#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Marble Control.

Usage:
  marbles export [--resume] [--for=NGO]
  marbles list STAGE
  marbles reset STAGE
  marbles report [(donor | funder)] (--for=NGO | --all)
                 [--year=YEAR] [--month=MONTH]
                 [--skipstages=PROCESS]... [--skip=NGO]...
  marbles tableau
  marbles filter
  marbles --version
  marbles --help

Arguments:
  STAGE    Marble stage, i.e. structure, progress, or export
  NGO      Food recovery NGOs
  PROCESS  Canonical stage, i.e. collection, processing, distribution
  YEAR     Reporting year
  MONTH    Reporting month, or last month in reporting period


Options:
  --help            Show this screen.
  -v --version         Show version.
  --for ORG            NGO.
  --all                Recursively apply to all NGOs.
  --skip NGO           Food NGOs to exclude
  --skipstage PROCESS  Canonical stages to exclude
  --year YEAR          Reporting year
  --month MONTH        Reporting month
  --resume             Resume from a previous export

Examples:
  marbles export            # Reset all, then export all
  marbles export --resume   # Skip Reset, resume export
  marbles export --resume --for PSC
                            # Skip Reset, only export data for PSC
  marbles list structure    # Print out the saved list of Google Drive Source sheets
  marbles list progress     # Print out the status of exported NGO Programme source sheets
  marbles reset all         # Run if you want to delete previously exported data, reset export progress
  marbles reset structure   # Run if new sheets were added to Source
  marbles reset progress    # Run if you want to reset the export progress
  marbles reset export      # Removes all exported dat
  marbles report --for FoodLink --year 2014 --month 3
                            # Generate all Foodlink reports for March 2014
  marbles report funder --all
                            # Generate all NGO's reports for funders
  marbles report donor --for Evergreen
                            # Generate Evergreen donor reports 
  marbles report donor --all --skipstage processing --skip Evergreen --skip PSC
                            # Generate reports for collections and distribution
                            # stages for all NGOs, except evergreen and psc
  marbles tableau           # Generate the tableau data structure
"""

from docopt import docopt
from functools import wraps
import json
import collections
import os

# Decorator
def print_head(func):
    @wraps(func)
    def __wrapper(*args, **kwargs):
        print("\n{:|^80}\n".format(" " + func.__name__.upper() + " "))
        func(*args, **kwargs)
        print("\n{:|^80}\n".format(" " + func.__name__.upper() + " "))
    return __wrapper

def nested_dict():
    return collections.defaultdict(nested_dict)

class MarbleControl(object):
    """Control your Marbles.
    """

    def __init__(self, args):
        self.args = args
        self.ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) + '/'
        self.valid_ngos = set()
        self.valid_parsers = {}

        welcome_msg ="""\n
               ███╗   ███╗ █████╗ ██████╗ ██████╗ ██╗     ███████╗
               ████╗ ████║██╔══██╗██╔══██╗██╔══██╗██║     ██╔════╝
               ██╔████╔██║███████║██████╔╝██████╔╝██║     █████╗
               ██║╚██╔╝██║██╔══██║██╔══██╗██╔══██╗██║     ██╔══╝
               ██║ ╚═╝ ██║██║  ██║██║  ██║██████╔╝███████╗███████╗
               ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝╚═════╝ ╚══════╝╚══════╝

             ██████╗ ██████╗ ███╗   ██╗████████╗██████╗  ██████╗ ██╗
            ██╔════╝██╔═══██╗████╗  ██║╚══██╔══╝██╔══██╗██╔═══██╗██║
            ██║     ██║   ██║██╔██╗ ██║   ██║   ██████╔╝██║   ██║██║
            ██║     ██║   ██║██║╚██╗██║   ██║   ██╔══██╗██║   ██║██║
            ╚██████╗╚██████╔╝██║ ╚████║   ██║   ██║  ██║╚██████╔╝███████╗
             ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝   ╚═╝   ╚═╝  ╚═╝ ╚═════╝ ╚══════╝
\n"""
        print(welcome_msg)

        if args['export']:
            if not args['--resume']:
                self.reset_structure()
                self.reset_progress()
            else:
                self.confirm_structure()
            self.export()

        elif args['list']:
            self.list(args['STAGE'])

        elif args['reset']:
            self.reset(args['STAGE'])

        elif args['report']:
            self.report()

        elif args['tableau']:
            self.tableau()

        elif args['filter']:
            self.filterYear()

        else:
            print(args)

    @print_head
    def list(self, stage):
        stages = ['progress','structure']
        if stage not in stages:
            print_error("stage", stages, stage)
            return True

        with open("{}{}.json".format(self.ROOT, stage), 'r') as j:
            print(json.dumps(json.load(j), indent=4, sort_keys=True))

    @print_head
    def reset(self, stage):
        if stage == 'all':
            self.reset_structure()
            self.reset_progress()
            self.reset_export()
        elif stage == 'structure':
            self.reset_structure()
        elif stage == 'progress':
            self.reset_progress()
        elif stage == 'export':
            self.reset_export()
        else:
            print_error("invalid stage", ['all', 'structure', 'progress', 'export'], stage)

    def reset_structure(self):
        path = 'structure.json'
        try:
            os.remove("{}{}".format(self.ROOT,path))
        except OSError:
            pass

    def reset_progress(self):
        path = 'progress.json'
        try:
            os.remove("{}{}".format(self.ROOT,path))
        except OSError:
            pass

    def reset_export(self):
        import shutil
        path = "data/Canonical/"
        shutil.rmtree("{}{}".format(self.ROOT,path))

    @print_head
    def export(self):
        from scripts.export_source_data import export_source_sheets

        opts = {}

        if self.args['--for'] and self.validate_source_ngo():
            opts["ngo"] = self.ngo
        if self.args['--skipstages']:
            opts["skipstages"] = self.args['--skipstages']
        if self.args['--skip']:
            opts["skip"] = self.args['--skip']

        export_source_sheets(**opts)

    @print_head
    def report(self):
        """" marbles report[(donor | funder)](-- for = NGO | --all)
                [--year = YEAR] [--month = MONTH]
                [--skipstages = PROCESS]...[--skip = NGO]...
        """

        self.confirm_structure()
        self.set_ngo_parser_mapping()

        if self.args['--all']:
            for ngo in self.valid_ngos:
                self.ngo = ngo
                self.report_ngo()

        elif self.validate_source_ngo():
            self.report_ngo()


    def report_ngo(self):

        if self.args['funder']:
            self.report_funder()

        elif self.args['donor']:
            self.report_donor()

        else:
            self.report_funder()
            self.report_donor()


    def report_funder(self):
        parser = self.valid_parsers[self.ngo]

        if parser == 'ecf':
            from scripts.report.ecf.funder import ECFReport

            opts = {
                "ngo" : self.ngo,
                'ONLY_STAGES': ['collection', 'distribution']
            }
            report = ECFReport(**opts)
            report.generate_all_reports()

        elif parser == 'foodshare':
            from scripts.report.foodshare.funder import FoodShareReport

            opts = {
                "ngo": self.ngo,
            }

            if self.args['--year']:
                opts['year'] = self.args['--year']

            if self.args['--month']:
                opts['month'] = self.args['--month']

            report = FoodShareReport(**opts)
            report.generate_all_reports()

        else:
            print_error('Invalid Parser', ['ecf','foodshare'], parser)



    def report_donor(self):
        parser = self.valid_parsers[self.ngo]

        if parser == 'ecf':
            from scripts.report.foodlink.amenities import FoodLinkAmenitiesReport
            from scripts.report.foodlink.donors import FoodLinkDonorReport

            opts = {
                "ngo": self.ngo,
            }

            # Amenities
            report = FoodLinkAmenitiesReport(**opts)
            report.data_to_pdf()

            # Donors
            report = FoodLinkDonorReport(**opts)
            report.data_to_pdf()

        elif parser == 'foodshare':
            pass

        else:
            print_error('Invalid Parser', ['ecf', 'foodshare'], parser)


    @print_head
    def filterYear(self):

        with open('structure.json', 'r') as fn:    
            
            data = json.load(fn)

        d = nested_dict()

        for stage, ngos in data.iteritems():
            for ngo, programmes in ngos.iteritems():
                for programme, sheets in programmes.iteritems():
                    for sheet in sheets:
                     if str(2017) in sheet['name']:
                         d[stage][ngo][programme] = [sheet]

        with open('structure.json', 'wb') as fn:    

            json.dump(d, fn, indent=4, sort_keys=True)


    @print_head
    def tableau(self):
        from scripts.report.generate_tableau_data_model import TableauReport
        t = TableauReport(skip=self.args['--skip'])
        t.generate_all_tableau_csv()
        t.getAllMergeCsv()
        t.genTableauFoodLinkCsv()

    def confirm_structure(self):
        from core.drive import generate_structure

        try:
            with open("{}{}.json".format(self.ROOT, 'structure'), 'r') as j:
                self.structure = json.load(j)
                self.stages = self.structure.keys()
                for stage, ngos in self.structure.iteritems():
                    self.valid_ngos.update(ngos)
                    for ngo, programme in ngos.iteritems():
                        for sheet in programme:
                            pass

            return True

        except IOError:
            print_warning('Missing structure.json', 'Downloading Source Structure for NGO Validation')
            generate_structure()
            self.confirm_structure()

    def validate_source_ngo(self):
        self.ngo = self.args['--for']
        if self.ngo in self.valid_ngos:
            return True
        else:
            print_error('Invalid NGO', self.valid_ngos, self.ngo)

    def set_ngo_parser_mapping(self):
        # TODO : Remove hard-coding of relationship between NGO and parser
        for ngo in self.valid_ngos:
            if ngo == 'FoodLink':
                self.valid_parsers[ngo] = 'ecf'
            else:
                self.valid_parsers[ngo] = 'foodshare'


if __name__ == '__main__' and __package__ is None:
    version = 'Marble Control - Alpha'

    from os import sys, path
    sys.path.append(path.dirname(path.dirname(path.abspath(__file__))))

    from scripts import print_error, print_warning

    args = docopt(__doc__, version=version)

    mc = MarbleControl(args)

