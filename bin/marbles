#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Marble Control.

Usage:
  marbles export [--resume]
  marbles list STAGE
  marbles reset STAGE
  marbles report [(donor | funder)] (--for=NGO | --all)
                 [--year=YEAR] [--month=MONTH]
                 [--skipstages=PROCESS]... [--skip=NGO]...
  marbles tableau 
  marbles --version
  marbles --help

Arguments:
  STAGE    Marble stage, i.e. structure, progress, or export
  NGO      Food recovery NGOs
  PROCESS  Canonical stage, i.e. collection, processing, distirbution
  YEAR     Reporting year
  MONTH    Reporting month, or last month in reporting period


Options:
  --help            Show this screen.
  -v --version         Show version.
  --for ORG            NGO [default: foodlink].
  --all                Recursively apply to all NGOs.
  --skip NGO           Food NGOs to exclude
  --skipstage PROCESS  Canonical stages to exclude
  --year YEAR          Reporting year [default: latest]
  --month MONTH        Reporting month [default: latest]
  --resume             Resume from a previous export

Examples:
  marbles export            # Reset all, then export all
  marbles export --resume   # Skip Reset, resume export
  marbles list structure    # Print out the saved list of Google Drive Source sheets
  marbles list progress     # Print out the status of exported NGO Programme source sheets
  marbles reset all         # Run if you want to delete previously exported data, reset export progress
  marbles reset structure   # Run if new sheets were added to Source
  marbles reset progress    # Run if you want to reset the export progress
  marbles reset export      # Removes all exported dat
  marbles report --for FoodLink --year 2014 --month 3
                            # Generate all Foodlink reports for March 2014
  marbles report funder --all
                            # Generate all NGO's reports for funders
  marbles report donor --for Evergreen
                            # Generate Evergreen donor reports 
  marbles report donor --all --skipstage processing --skip Evergreen --skip PSC
                            # Generate reports for collections and distribution
                            # stages for all NGOs, except evergreen and psc
  marbles tableau           # Generate the tableau data structure
"""

from docopt import docopt
from functools import wraps
import json
import os

# Decorator
def print_head(func):
    @wraps(func)
    def __wrapper(*args, **kwargs):
        print("\n{:|^80}\n".format(" " + func.__name__.upper() + " "))
        func(*args, **kwargs)
        print("\n{:|^80}\n".format(" " + func.__name__.upper() + " "))
    return __wrapper


class MarbleControl(object):
    """Control your Marbles.
    """

    def __init__(self, args):
        self.args = args
        self.ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) + '/'

        welcome_msg ="""\n
               ███╗   ███╗ █████╗ ██████╗ ██████╗ ██╗     ███████╗
               ████╗ ████║██╔══██╗██╔══██╗██╔══██╗██║     ██╔════╝
               ██╔████╔██║███████║██████╔╝██████╔╝██║     █████╗
               ██║╚██╔╝██║██╔══██║██╔══██╗██╔══██╗██║     ██╔══╝
               ██║ ╚═╝ ██║██║  ██║██║  ██║██████╔╝███████╗███████╗
               ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝╚═════╝ ╚══════╝╚══════╝

             ██████╗ ██████╗ ███╗   ██╗████████╗██████╗  ██████╗ ██╗
            ██╔════╝██╔═══██╗████╗  ██║╚══██╔══╝██╔══██╗██╔═══██╗██║
            ██║     ██║   ██║██╔██╗ ██║   ██║   ██████╔╝██║   ██║██║
            ██║     ██║   ██║██║╚██╗██║   ██║   ██╔══██╗██║   ██║██║
            ╚██████╗╚██████╔╝██║ ╚████║   ██║   ██║  ██║╚██████╔╝███████╗
             ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝   ╚═╝   ╚═╝  ╚═╝ ╚═════╝ ╚══════╝
\n"""
        print(welcome_msg)

        if args['export']:
            if not args['--resume']:
                self.reset_structure()
                self.reset_progress()
            self.export()

        elif args['list']:
            self.list(args['STAGE'])

        elif args['reset']:
            self.reset(args['STAGE'])

        elif args['report']:
            pass

        elif args['tableau']:
            self.tableau()

        else:
            print(args)

    @print_head
    def list(self, stage):
        stages = ['progress','structure']
        if stage not in stages:
            print("\n{: ^80}\n".format(" << WARNING : INVALID STAGE >> "))
            print("\n{: ^80}\n".format(" Valid Values : {}".format(", ".join(stages))))
            return True

        with open("{}{}.json".format(self.ROOT, stage), 'r') as j:
            print(json.dumps(json.load(j), indent=4, sort_keys=True))

    @print_head
    def reset(self, stage):
        if stage == 'all':
            self.reset_structure()
            self.reset_progress()
            self.reset_export()
        elif stage == 'structure':
            self.reset_structure()
        elif stage == 'progress':
            self.reset_progress()
        elif stage == 'export':
            self.reset_export()
        else:
            print("\n{: ^80}\n".format(" << WARNING : INVALID STAGE >> "))
            print("\n{: ^80}\n".format(" Valid Values : all, structure, progress, export "))

    def reset_structure(self):
        path = 'structure.json'
        try:
            os.remove("{}{}".format(self.ROOT,path))
        except OSError:
            pass

    def reset_progress(self):
        path = 'progress.json'
        try:
            os.remove("{}{}".format(self.ROOT,path))
        except OSError:
            pass

    def reset_export(self):
        import shutil
        path = "data/Canonical/"
        shutil.rmtree("{}{}".format(self.ROOT,path))

    @print_head
    def export(self):
        from scripts.export_source_data import export_source_sheets
        export_source_sheets()

    @print_head
    def report(self):
        pass

    @print_head
    def tableau(self):
        from scripts.report.generate_tableau_data_model import TableauReport
        t = TableauReport(skip=self.args['--skip'])
        t.generate_all_tableau_csv()
        t.getAllMergeCsv()


if __name__ == '__main__' and __package__ is None:
    version = 'Marble Control - Alpha'

    from os import sys, path
    sys.path.append(path.dirname(path.dirname(path.abspath(__file__))))

    args = docopt(__doc__, version=version)

    mc = MarbleControl(args)

